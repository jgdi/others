#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <string>
#include <conio.h>
#include <iostream>


using namespace std;

#define NAME_LEN 20
#define ID_LEN 10
#define SCORE_LEN 10

struct student
{
	char num[ID_LEN];//学号
	char name[NAME_LEN];
	char score[SCORE_LEN];
};
struct List
{
	struct List *prev;
	struct student stu;
	struct List *next;
};

List *head=NULL;//定义了一个头节点的指针方便等会直接给头结点分配空间
List *tail=NULL;//定义一个尾指针
void init()
{
	head=(List *)malloc(sizeof(List));
	tail=(List *)malloc(sizeof(List));
	List *p=NULL;//指向将要新加入的节点
	List *q=NULL;//记录下最后加入的元素的位置
	head->prev=NULL;
	head->next=tail;
	tail->prev=head;
	tail->next=NULL;
	q=head;
	int number=0;
	while(1)
	{
		printf("--------------------------------------------------\n");
		printf("请输入第%d个人的信息\n",++number);
		p=(List *)malloc(sizeof(List));
		printf("请输入学号:\n");
		scanf("%s",p->stu.num);
		printf("请输入姓名:\n");
		scanf("%s",p->stu.name);
		printf("请输入分数:\n");
		scanf("%s",p->stu.score);
		printf("--------------------------------------------------\n");
		q->next=p;
		p->next=tail;
		p->prev=q;
		tail->prev=p;
		q=q->next;
		printf("请选择是否继续输入,按0退出输入并显示当前表中数据\n");
		int n;
		scanf("%d",&n);
		if(n==0)
			return;
	}
}
void display()
{
	List *p;
	p=head->next;
	printf("表中数据如下:\n");
	printf("一一一一一一一一一一一一一一一一一一一一一一一一一一\n");
	do
	{
		printf("|\t");
		printf("%s\t",p->stu.num);
		printf("|\t");
		printf("%s\t",p->stu.name);
		printf("|\t");
		printf("%s\t",p->stu.score);
		printf("|\t");
		printf("\n");
		printf("一一一一一一一一一一一一一一一一一一一一一一一一一一\n");
		p=p->next;
	}while(p->next!=NULL);

}

int menu()
{
	printf("请输入你将要进行的操作:\n");
	printf("1.初始化但链表\n");
	printf("2.查找链表中保存的数据\n");
	printf("3.删除表中的数据元素\n");
	printf("4.将表中的数据按成绩从高到底排序\n");
	int s=0;
	scanf("%d",&s);
	return s;

}
void find()
{
	printf("请输入你要查找的学生的学号\n");
	List *f=NULL;
	List *p1=NULL;
	f=new List;
	cin.clear();
	cin.sync();
	cin>>f->stu.num;
	p1=head->next;
	while(p1->next!=NULL&&strcmp(p1->stu.num,f->stu.num)!=0)
		p1=p1->next;
	printf("查找到的数据如下:\n");
	printf("|\t");
	printf("%s\t",p1->stu.num);
	printf("|\t");
	printf("%s\t",p1->stu.name);
	printf("|\t");
	printf("%s\t",p1->stu.score);
	printf("|\t");
	printf("\n");
}
void delete1()
{
	List *d;
	List *p1;
	p1=head->next;
	printf("请输入你要删除的数据\n");
	d=new List;
	cin>>d->stu.num;
	while(strcmp(p1->next->stu.num,d->stu.num)!=0)
		p1=p1->next;
	p1->next=p1->next->next;
}
void sort()
{
	List *NL;
	List *p;//遍历原表的指针
	List *q;//指向要断出节点的指针
	List *q1;//指向要断出的节点的后一个节点的指针
	List *b;//遍历新的链表的指针
	NL=head->next;
	p=NL;
	q=head->next->next;
	NL->next=NULL;
	do
	{
		if(q->stu.score>p->stu.score)
		{
			q1=q->next;
			p->next=q;
			q->next=NULL;
			q=q1;
			p=p->next;
			p->next=NULL;
		}
		else
		{
			printf("error!");
		}
	}while(q->next!=NULL);
	b=NL;
	do
	{
		printf("%d",b->stu.score);
		printf("\n");
	}while(b->next!=NULL);
}
void main()
{
	while(1)
	{
		int k=0;
		k=menu();
		switch(k)
		{
			case 1:
				init();
				display();
				break;
			case 2:
				find();
				break;
			case 3:
				delete1();
				display();
				break;
			case 4:
				sort();
				break;
		}
	}
			
}



