#include <iostream>
using namespace std;

/*输入二叉树
      A
	 / \
    B   C
   / \   \
  D   E   F
格式应该是ABD  E  C F  ; 
*/
struct bittree
{
	char data;
	struct bittree *lchild;
	struct bittree *rchild;
};
int menu()
{
	cout<<"1.先序递归遍历二叉树"<<endl;
	cout<<"2.中序递归遍历二叉树"<<endl;
	cout<<"3.后序递归遍历二叉树"<<endl;
	int r=0;
	scanf("%d",&r);
	return r;
}
struct bittree *init(struct bittree *BT)
{
	char ch;
	scanf("%c",&ch);
	if(ch==' ')
	{
		BT=NULL;
	}
	else
	{
		BT=new bittree;
		BT->data=ch;
		BT->lchild=init(BT->lchild);
		BT->rchild=init(BT->rchild);
	}
	return BT;
}
void FirstShow(struct bittree *BT)
{
	if(BT!=NULL)
	{
		printf("%c",BT->data);
		FirstShow(BT->lchild);
		FirstShow(BT->rchild);
	}
}
void MidShow(struct bittree *BT)
{
	if(BT!=NULL)
	{
		MidShow(BT->lchild);
		printf("%c",BT->data);
		MidShow(BT->rchild);
	}
}
void TailShow(struct bittree *BT)
{
	if(BT!=NULL)
	{
		TailShow(BT->lchild);
		TailShow(BT->rchild);
		printf("%c",BT->data);
	}
}
void NFirstShow(struct bittree *BT)
{

}
int main()
{
	cout<<"                                    二叉树"<<endl;
	bittree *BT;
	BT=NULL;
	cout<<"请输入二叉树"<<endl;
	BT=init(BT);
	while(1)
	{
		int key=0;
		key=menu();
		switch(key)
		{
		case 1:
			FirstShow(BT);
			cout<<endl;
			break;
		case 2:
			MidShow(BT);
			cout<<endl;
			break;
		case 3:
			TailShow(BT);
			cout<<endl;
			break;
		}
	}
}