
#include <stdio.h>
#include <malloc.h>//malloc()
#include <string.h>//字符处理函数
#include<stdlib.h>


#define NAME_LEN 15//最长不超过15字节
#define SEX_LEN 4//最长不超过15字节
#define OVER "exit"//结束标志

struct Score
{
	float c, english, math;
};
typedef struct Stu
{
	int no,age;
	char name[NAME_LEN], sex[SEX_LEN];
	struct Score score;
	float avg;
};

typedef struct theNode
{
	struct theNode *prev;
	int order;
	Stu stu;
	struct theNode *next;
}Node;

//定义学生基本信息

Node *head = NULL;
Node *tail = NULL;

int num = 0;
char key;//定义接受按键的全局变量
int dir = 0;//初始化用的监视哨
int flag = 1;

void DisplayMenu1()//显示主界面
{
	printf("请选择功能:\n");
	printf("----------------------------------\n");
	printf("(1)排序\t(2)查找信息\t(0)退出程序\n");
	printf("----------------------------------\n");
}

void DisplayMenu2()//显示排序选择界面
{
	printf("请选择排序方向:\n");
	printf("----------------------------------\n");
	printf("(1)学号\t(2)姓名\t(3)性别\t(4)年龄\n(5)C语言(6)英语\t(7)高数\t(8)平均分\n(9)显示所有信息\t(0)退出程序\n");
	printf("----------------------------------\n");
}

void InputStudent()
{
	Node *p=NULL;//新增的人
		head = (Node *)malloc(sizeof(Node));
		tail = (Node *)malloc(sizeof(Node));
		head->prev = NULL;
		head->next = tail;
		tail->prev = head;
		tail->next = NULL;
		while (1)
		{
			p = (Node *)malloc(sizeof(Node));
			p->order = num;
			printf("请输入第%d个学生的学号,姓名,性别,年龄,C语言成绩,英语成绩,高数成绩:\n", num + 1);
			scanf("%d %s %s %d %f %f %f",&p->stu.no,p->stu.name,p->stu.sex,&p->stu.age,&p->stu.score.c,&p->stu.score.english,&p->stu.score.math);
			fflush(stdin);
			p->stu.avg = (p->stu.score.c + p->stu.score.english + p->stu.score.math)/3;


			//将新的节点p加入到tail节点之前
			p->next = tail;
			p->prev = tail->prev;
			tail->prev->next = p;
			tail->prev = p;
			num++;
			printf("请选择操作:\n");
			printf("(0)输入完成\t\t(其他任意键):继续输入");

			if (getchar() == '0')
				return;

		}
}

void SortStudent()
{
	Node *m;//左比较节点的前节点
	Node *p;//左比较节点
	Node *q;//右比较节点
	Node *n;//右比较节点的前节点

	int f;//大小标志:0前者大1后者大
	int swap;//是否交换:1换0不换

	if (num == 1)
		return;
	m = head;
	p = m->next;
	while (p->next != tail)
	{
		q = p->next;
		n = q->next;
		while (q != tail)
		{
			f = 0;
			switch (key)
			{
			case '1':
				if (p->stu.no < q->stu.no)
					f = 1;
				break;
			case '2':
				if (strcmp(p->stu.name,q->stu.name)<0)
					f = 1;
				break;
			case '3':
				if (strcmp(p->stu.sex, q->stu.sex)<0)
					f = 1;
				break;
			case '4':
				if (p->stu.age < q->stu.age)
					f = 1;
				break;
			case '5':
				if (p->stu.score.c < q->stu.score.c)
					f = 1;
				break;
			case '6':
				if (p->stu.score.english < q->stu.score.english)
					f = 1;
				break;
			case '7':
				if (p->stu.score.math < q->stu.score.math)
					f = 1;
				break;
			case '8':
				if (p->stu.avg < q->stu.avg)
					f = 1;
				break;
			case '9'://原始输入顺序
				if (p->order < q->order)
					f = 1;
				break;
			default:
				printf("请选择正确操作!\n");
				break;
			}

			swap = 0;
			if (f == 1 && dir == 1)
				swap = 1;
			if (f == 0 && dir == 2)
				swap = 1;
			//要交换
			if (swap==1)
			{
				m->next = p->next;
				p->next->prev = m;
				//p左侧移除
				q->prev->next = n;
				n->prev = q->prev;
				//q右侧移除
				
				q->next = m->next;
				q->prev = m;
				m->next->prev = q;
				m->next = q;
				//q插入到m后

				p->next = n;
				p->prev = n->prev;
				n->prev->next = p;
				n->prev = p;
				//p插入到n前

				p = m->next;
				q = n->prev;
				//回复q,p原来的位置
			}
			q = n;
			n = q->next;//相当于a[j]
		}
		m = p;
		p = p->next;//指针下移
	}
}

void OutPutStudent()
{
	Node *p;
	if (key == '9')
		printf("原始输出学生信息\n");
	else
		printf("排序后的学生信息\n");

	p = head->next;
	printf("---------------------------------------------------------------------------\n");
	printf("学号\t姓名\t性别\t年龄\tC语言成绩\t英语成绩    高数成绩 平均成绩\n");
	while (p != tail)
	{
		printf("%d\t%s\t%s\t%d\t%.1f\t\t%.1f\t\t%.1f     %.1f\n", p->stu.no, p->stu.name, p->stu.sex, p->stu.age, p->stu.score.c, p->stu.score.english, p->stu.score.math, p->stu.avg);
		p = p->next;
	}
	printf("---------------------------------------------------------------------------\n");

}

void FindStudent()
{
	int n = 0;
	Node *p,*c=head->next;//分别表示临时节点和当前节点
	p = (Node *)malloc(sizeof(Node));
	printf("请输入想要查找的学生姓名:");
	gets(p->stu.name);
	while (c != tail)
	{
		if (strcmp(c->stu.name, p->stu.name) == 0)
		{
			printf("---------------------------------------------------------------------------\n");
			printf("学号\t姓名\t性别\t年龄\tC语言成绩\t英语成绩    高数成绩 平均成绩\n");
			printf("%d\t%s\t%s\t%d\t%.1f\t\t%.1f\t\t%.1f     %.1f\n", c->stu.no, c->stu.name, c->stu.sex, c->stu.age, c->stu.score.c, c->stu.score.english, c->stu.score.math, c->stu.avg);
			printf("---------------------------------------------------------------------------\n");
			n++;
			break;
		}
		c = c->next;
	}
	if (1 != n)
	{
		printf("没有该学生信息!\n");
	}
}

int GetOrderDir()//获取排序方向
{
	char key;
	printf("-------------------------\n");
	printf("请输入排序方式:\n1.降序排列\n2.升序排列\n");
	printf("-------------------------\n");
	fflush(stdin);
	key = getchar();
	if (key == '1')
	{
		return 1;
	}
	else if (key == '2')
	{
		return 2;
	}
}



void main()
{
	int i = 0;
	InputStudent();
	fflush(stdin);
	while (1)
	{
		DisplayMenu1();
		key = getchar();
		switch (key)
		{
		case'1':
			DisplayMenu2();
			fflush(stdin);
			key = getchar();
			dir = GetOrderDir();
			fflush(stdin);
			SortStudent();
			OutPutStudent();
			system("pause");
			system("cls");
			break;
		case'2':
			fflush(stdin);
			FindStudent();
			system("pause");
			system("cls");
			break;
		case'0':
			exit(1);
			break;
		default:
			break;
		}
		
	}
}